{"meta":{"title":"蒲山牧","subtitle":"工欲善其事，必先利其器！","description":"本站是Upsame的技术分享博客。内容涵盖生活故事、FPGA技术、Python、计算机网络、数学建模、Linux系统、高可用架构、中间件使用、系统监控等相关的研究与知识分享。","author":"Upsame","url":"https://upsame.coding.me","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-11-17T08:36:49.238Z","updated":"2019-11-17T08:36:49.238Z","comments":false,"path":"/404.html","permalink":"https://upsame.coding.me/404.html","excerpt":"","text":""},{"title":"关于","date":"2019-11-17T08:36:49.239Z","updated":"2019-11-17T08:36:49.239Z","comments":false,"path":"about/index.html","permalink":"https://upsame.coding.me/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2019-11-17T10:02:28.974Z","updated":"2019-11-17T08:36:49.239Z","comments":false,"path":"books/index.html","permalink":"https://upsame.coding.me/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-11-17T08:36:49.240Z","updated":"2019-11-17T08:36:49.240Z","comments":true,"path":"links/index.html","permalink":"https://upsame.coding.me/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-11-17T10:10:50.771Z","updated":"2019-11-17T08:36:49.240Z","comments":false,"path":"categories/index.html","permalink":"https://upsame.coding.me/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-11-17T08:36:49.241Z","updated":"2019-11-17T08:36:49.241Z","comments":false,"path":"repository/index.html","permalink":"https://upsame.coding.me/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-11-17T08:36:49.241Z","updated":"2019-11-17T08:36:49.241Z","comments":false,"path":"tags/index.html","permalink":"https://upsame.coding.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"学习 Markdown 文本标记语言","slug":"2019/2019-10-28-learn-Markdown","date":"2019-11-17T11:38:05.673Z","updated":"2019-10-28T11:46:54.542Z","comments":true,"path":"2019/11/17/2019/2019-10-28-learn-Markdown/","link":"","permalink":"https://upsame.coding.me/2019/11/17/2019/2019-10-28-learn-Markdown/","excerpt":"学习 Markdown 文本标记语言","text":"原创2019年10月28日更新 学习 Markdown 文本标记语言谁用Markdown ?Markdown是为哪些使用者设计的？ 首先要确定你是否真的需要Markdown，使用某种工具是为了提高效率或者某种体验的，如果这种工具并不能显著帮你改善体验，那就让它见鬼去吧，哪怕这个工具学起来很简单。 Markdown是为那些需要经常码字或者进行文字排版的、对码字手速和排版顺畅度有要求的人群设计的，他们希望用键盘把文字内容啪啪啪地打出来后就已经排版好了，最好从头到尾都不要使用鼠标。 这些人包括经常需要写文档的码农、博客写手、网站小编、出版业人士等等。通常情况下，网络上需要进行大量文字输入的地方都可以通过所见即所得的方式排版（比如知乎的答案编辑模式），本地写作的话则可以使用word这类常用的文本编辑软件，当然你也可以蛋疼地手工使用htMl标签实现排版效果——而Markdown只是使这一切更方便了一点而已，所以如果你觉得现有文本编辑方式完全够用了，就别费神折腾了（除非你在使用像github这样Markdown作为主流编辑方式的网站）。 我对Markdown的 感想： Markdown ，怎么说呢？本身不支持注释功能让人很失望。 第二：只能转化为htMl文件，通过一定渠道可以转化为PDF文件，不能转化为Word（可以直接复制粘贴到word，但是格式不好看，想要的效果都没有了） 第三：PDF本身难以编辑，还是Word比较通用，为了保证兼容性（与其他同学的兼容），还是首先选择word编辑吧！ 我对Markdown的理解 Markdown 就是为了展示给人看的吧，别人不能编辑，可是如果我有一个Markdown文件，我刚使用什么软件去查看这个文件排版格式呢?当然是Markdown专用写作软件，或者支持Markdown书写的文章平台。 我们设想这样一个情景：我想要查看Markdown文件编译出来的格式文件，所以我找到了一款阅读器可以打开文件并阅读，可是我发现错误想要修改，但是编译出的有格式的文件不可编辑，于是我当然想到要编辑Markdown源文件，这样，可以解释为什么Markdown文件至少要包含源文件了。 其实应该有更好的选择，即：包含.Md的源文件和可以阅读的格式文件，在编辑阅读器中点击修改就可以调出源文件.Md进行修改。 实现这一功能的软件就是：Typora(其实真正让我选择它的只是因为它好看而且免费\\手动微笑。能支持数学公式的编辑，能导出为pdf) 。 事实上我们获得的文件夹中只有源文件.Md而已，因为是即时编译的，所以直接能看到效果。综上所述，只要我拥有一个可以进行.Md文件即使编译的软件就可以很好地打开Markdown 文件和其产生的格式（效果）文件。 像notepad++等这样的文本编辑器，只具有编辑。Md文件的功能，当然不能奢望他还能看到编辑生成的最后效果文件的样子。（当然，你可以在头脑中想象嘛！） 你所看到的各种Markdown编辑器显示的样式都是转换为HTML后加上CSS显示的。 关于Markdown编辑、编译器的选择：那么选择哪一款软件呢？有道云笔记吗？MarkdownPod 等桌面软件？CSDN? 简书？作业部落的CMd Markdown，还是马克飞象？ MarkdownPod等 已卸载 MarkdownPad是适用于Windows的Markdown编辑编译器，免费版不能导出PDF等,付费版需要15 dollars。 并且，我安装MarkdownPad之后莫名不能用，提示有错，写入的.Md文件不能预览，这还有什么用呢？所以我果断卸载了。 其他的Markdown编辑器应该不能免费支持PDF导出吧？听说Pondoc–“瑞士军刀”要编译汉字需要结合latex引擎，配置复杂，所以还算是放弃使用这些软件吧。CSDN就可以支持导出HTML文件（纯文本有乱码，带模板的正常） 发现新大陆： Marxico 中文名马克飞象，可以PDF导出，可选择汉字，就是颜色微微不同，效果不如HTML好，但是确实相当不错的。 马克飞象，本地客户端与在线客户端一模一样，所以安装后卸载了。打开chroMe直接访问官网链接就可以了。 马克飞象提供 10 天的免费试用，之后如继续使用，请购买会员服务。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。 作业部落的CMd Markdown 貌似也要会员才能导出。 简书注册需要手机，写作平台很好，对 Markdown 的支持也很棒。 最后的选择当然是：支持Markdown的个人博客、简书、CSDN了。 点击这里 查看Markdown写作平台选择。 点击这里 查看我的个人博客建设规划。","categories":[{"name":"it","slug":"it","permalink":"https://upsame.coding.me/categories/it/"}],"tags":[{"name":"it","slug":"it","permalink":"https://upsame.coding.me/tags/it/"}]},{"title":"函数的相关与卷积","slug":"2019/2019-10-26-Correlation-Convolution","date":"2019-11-17T11:38:05.668Z","updated":"2019-10-26T12:40:40.917Z","comments":true,"path":"2019/11/17/2019/2019-10-26-Correlation-Convolution/","link":"","permalink":"https://upsame.coding.me/2019/11/17/2019/2019-10-26-Correlation-Convolution/","excerpt":"函数的相关与卷积","text":"原创 [TOC] 信号处理过程中 卷积的定义卷积满足交换律、分配律、结合律。也具有位移不变性以及缩放性质。 互相关的定义 替换变量后有： 上述两式完全等价。 性质： （1）互相关是两个函数间存在相似性的量度。 （2）由上述（2）式可得： （3）相关运算和卷积运算的区别：对相关来说，f(x)要取复共轭，运算时f(x)不需折叠。 （4）f(x)和g(x) 做相关 等于 f*(-x) 与 g(x) 做卷积。 （5）注意互相关不满足交换律。 自相关 在信号分析当中通常将自相关函数称之为自协方差方程，定义如下： 自相关是互相关的一种特殊情况，就是一个序列和它本身做相关，主要用来衡量一个序列在不同时刻取值的相似程度。 数理统计中 相关：我们通常说的相关系数的学名是—皮尔逊积差系数（Pearson’s product moment coefficient），这种相关系数只对两个变量的线性关系敏感。Pearson 相关系数使用两个变量的协方差和标准差来定义： 其中，cov 是协方差，sigma 是标准差。因为 cov 可以写作： 所以 Person 相关系数的定义式可以写作： 自相关的定义式如下： 如果随机过程是一个宽平稳过程，那么均值和方差都不是时间的函数，所以，自相关定义式变为： 在某些学科中，会去掉归一化因子σ2，使用自协方差来代替自相关。但是归一化因子可以让自相关的取值在 [-1, +1] 之间，不会随着序列的绝对大小而变化。 在信号处理中：自相关的定义会去掉归一化，即不用减去均值，也不用除以方差。当除以方差时，一般叫做另外一个名字：自相关系数(Autocorrelation coefficient)。","categories":[{"name":"5G","slug":"5G","permalink":"https://upsame.coding.me/categories/5G/"}],"tags":[{"name":"5G","slug":"5G","permalink":"https://upsame.coding.me/tags/5G/"}]},{"title":"个人博客建立规划","slug":"2019/2019-10-22-individual-blog-setup","date":"2019-11-17T11:38:05.663Z","updated":"2019-10-23T13:16:11.114Z","comments":true,"path":"2019/11/17/2019/2019-10-22-individual-blog-setup/","link":"","permalink":"https://upsame.coding.me/2019/11/17/2019/2019-10-22-individual-blog-setup/","excerpt":"个人博客建立规划","text":"原创首发于我的个人博客 www.upsame.com 基础平台选择主站采用Github pages搭建，FPGA分站基于Coding pages搭建。博客主题均选择开源解决方案。建立分站的原因主要是Github国内访问不稳定的问题，其次是Github 博客百度不收录问题。 主站采用Github pages搭建完全根据技术人如何搭建自己的技术博客 的步骤和模板搭建，然后进行了一些自定义设置，并将网站设置为https访问方式，增加安全性。FPGA分站则参照主站的建立方法从一些开源模板中挑选了一个自己认为不错的模板来搭建，由于Coding pages搭建的可以被百度索引，并且实际上访问速度快于Github，所以也有打算将主站也搭建在Coding上。 值得一提的是网上很多吐槽Coding 的Pages服务的，说这也不好那也不好最后都去了Github pages。实际上，目前腾讯与Coding联合打造的腾讯开发者平台上的Coding服务非常好，Github的功能都有，还有无限私有库，值得了解。 图片处理方案合理的发文方式是，首先在自己博客平台上发文，使用图床工具（比如路过图床、SM图床）或者服务器空间存储的图片，然后二次发布到简书平台，CSDN平台（CSDN平台可以选择不进行二次发布，或者在文章图少可以发布，图多不建议）。 下面将介绍我的方案选择原因。 1、 使用简书作为图床工具具体操作就是用简书当作文章首发平台，然后将原文再次发布到我的个人博客网站上。然后再将文章发布到其他平台，比如CSDN。这样做有个重大问题： 之前发现简书的markdown中的链接与时间显示中的链接有所不同，以为这是简书的某种机制，只需要修改链接为实际显示的链接就可以了，结果替换链接后仍然无法自动加载。简书的图片外链在我的自建博客中无法自动加载，对图片右键点击用新标签页打开图片显示没有权限，在浏览器直接输入图片引用地址点击 enter又能够访问，此时刷新网站页面可以看到图片加载了。这里面应该是存在某些权限问题。因此没有知道原因之前不能使用简书当作图床工具使用。 2、 使用CSDN作为图床工具具体操作就是用CSDN当作文章首发平台，然后将原文再次发布到我的个人博客网站上。然后再将文章发布到其他平台，比如简书。问题主要是水印：CSDN中上传图片和简书类似，但是目前会强制在右下角加上水印，目前没有解决方案，如图：这样导致发布在我的个人博客平台后文中的图片都有CSDN的水印，严重影响个人体验，所以这种方案肯定不行。 3、 使用专业图床工具，比如路过图床和SM图床这两个图床算是比较稳定的，基本都存活了好几年了，路过图床的收费特性也基本肯定了跑路的概率较小。具体操作便是本地使用Markdown编辑器编辑文章，图片上传到图床，将写好的文章发布到个人博客、简书和CSDN。存在的问题主要是图片链接的时效性问题，图片外链访问是否长期且稳定，这个还要看图床的支撑团队。这里列举的路过图床和SM图床都比较稳定，不放心的话可以付费。不过对于我本人来说，为图床付费还不如我直接购买对象存储服务套餐来的划算。 4、 将图片存储在服务器上具体操作便是本地使用Markdown编辑器编辑文章，图片直接保存在Git根目录下，文章内直接调用，文章完成后发布到分别个人博客、简书和CSDN。将图片和网站文章均存储到云服务器上，这样访问的速度完全取决于服务器带框，数据的保障完全在于自己是否续费。这样的自主性很大，但是由于文章累计导致图片存储空间快速增加，后续可能需要购买对象存储空间或者使用大容量的与服务器。本人才博客初期，目前还没有这方面需求，但是这些必须考虑在未来的网站规划中。 一些问题：收发于简书的文章拷贝到CSDN中的链接可以使用，CSDN会自动进行转化，虽然图片不会添加水印，但是不知道为什么即使再CSDN平台上查看此文章时图片加载速度特别慢，而且会有很多图片会加载失败；再次将CSDN转化后的文章发布到自己网站时也加载速度特别慢，几乎等于无法使用。推测转化后的链接可能访问速度较慢，在某种层面上要求用户将图片下载后再上传（顺便自动加上CSDN的呵呵水印）。 于是，CSDN显然不能作为首发平台，而且如果它作为次发平台，它对于链接的转入却没有什么支持，所以其他平台发布的文章在此平台次发时应该需要较少的图片，否则就不在此发了，因为加载实在有点慢。 最后的选择：综上，我的主要写作平台由我的博客+CSDN变为 我的博客+简书+ CSDN（CSDN可不用）","categories":[{"name":"it","slug":"it","permalink":"https://upsame.coding.me/categories/it/"}],"tags":[{"name":"it","slug":"it","permalink":"https://upsame.coding.me/tags/it/"}]},{"title":"ISE和Modelsim联合仿真","slug":"2019/2019-10-20-ISE-Modelsim-setting","date":"2019-11-17T11:38:05.629Z","updated":"2019-10-23T13:17:33.778Z","comments":true,"path":"2019/11/17/2019/2019-10-20-ISE-Modelsim-setting/","link":"","permalink":"https://upsame.coding.me/2019/11/17/2019/2019-10-20-ISE-Modelsim-setting/","excerpt":"ISE和Modelsim联合仿真","text":"原创首发于我的个人博客 www.upsame.com ISE和Modelsim联合仿真相信很多人会遇到过这个问题，不知如何让ISE调用Modelsim进行仿真。我也迷糊了不少时间，查查找找，终于弄明白了，所以有了本文，和大家分享一下。我尽量讲得详细点儿，多多上图。 我的环境： Windows 7 64位，Xilinx ISE Design Suite 13.4（D:\\Xilinx\\13.4），ModelsimSE-64 10.1a（D:\\modeltech64_10.1a， 哈，也是64位的）。不过32位的和64位的设置几乎没有什么区别。先安装好ISE和Modelsim， 网上看过一些文章总说先装ISE再装Modelsim，不过我整过一阵，其实二者的顺序是无关紧要的。安装过程不在本文的讨论范围内，就不多说了，不过一定要注意版本要合适，Modelsim的版本不要太低，这个可以自己到网上查一查，还有非常重要的一点是安装路径不能有中文或空格。 编译仿真库由于我装的Modelsim SE是通用版的，只自带了少许的仿真库（Simulation Library），所以还要编译一下Xilinx的仿真库。只有XE才自带Xilinx的仿真库，如果装的是XE版便不必编译仿真库了。编译库可以用ISE带界面的工具，也可以用命令行下的，前者方便，先讲前者。 打开编译库工具“Simulation Library Compilation Wizard”：“开始—所有程序—Xilinx ISE Design Suite 13.4（版本不同就不同）—ISE Design Tools—64-bit Tools（32位的选32-bit Tools）—Simulation Library Compilation Wizard”。注意，64位系统中默认安装了64位和32位的ISE，如果你想用32位的ISE，那你就得选32位的编译库工具，不能混着用的，而且Modelsim也得装上32位的版本，所以我建议64位系统的就用64位的ISE，而32位系统的没得选，只能用32位的。如图01所示。 打开工具之后，在“Select Simulator”下面选中你所装好的Modelsim版本，我这儿选“Modelsim SE”，在“Simulator Executable Location”下面填入Modelsim.exe的所在的文件夹，点“Browse…”按钮添加也行，我这儿是“D:\\modeltech64_10.1a\\win64”（不含双引号，下同，除非有特别的说明），如图02，然后Next。 之后是选择需要编译的语言，选“Both VHDL and Verilog”，一般两种都要用，如图03，然后Next。 接下来是选择设备，默认是全选，如果有一些你实在用不上就不选吧，这样可以省点时间和硬盘空间，全选时挺大条的，如图04，还是Next。 下一步默认就行，全选上，下面的两行东东留空即可，那是添加额外库的，第一行是路径，第二行是命令参数，无视之。如图05，Next。 这一步比较关键，在“Output directory for compiled libraries”下面填入输出已编译库的路径，默认也行。个人建议新建一个单独的文件夹，好管理，只要版本一样的，下次直接拿来用，重装也不怕。不过文件夹的名字和整个路径中绝对不能有中文或空格，切记、切记！！！我这儿是“D:\\modeltech64_10.1a\\Xilinx_lib”。其他的选项默认便可，之后点“Launch Compiled Process”，如图06。之后就开始编译了，如图07。其实这一页是很有用处的，详情请点下面的那个“More Info”按键，不过帮助是英文的。 等待……编译完后就会出现一些编译日志，图08，Next，图09，Finish。只要没有Err就成，Warn无视。若有Err，就回顾下版本对不对，路径有没有中文或空格。 设置ISE和Modelsim的关联。在“D:\\Xilinx\\13.4\\ISE_DS\\ISE”文件夹中找到“modelsim.ini”，“D:\\Xilinx\\13.4”这个是你的ISE安装目录，后半路径是一样的，实在不行就进入安装目录然后搜索“modelsim.ini”，如图2.1。 打开“modelsim.ini”，用记事本打开时不要用自动换行功能，菜单中“格式—自动换行”把勾去掉。个人不建议用记事本，写字板那就更不行了，有的文件用写字板改了会出现问题，搞编程类的总得有个好点儿的文本编辑工具吧，我用的是EmEditor，到网上搜一下吧，有不少呢。在第九行左右（可能是）找到“[Library]”，下面一行的“others = $MODEL_TECH/../modelsim.ini”和行的开头的分号（；）的全部都无视。那些行开头没有分号的，格式一般是“X···X = 路径”，一直到“[vcom]”之上的都要，选的仿真库多时可有好长的一段，全部复制。见图12、图13和图14。 然后在Modelsim的安装目录下，我这儿是“D:\\modeltech64_10.1a”，找到“modelsim.ini”，名字一样。先去换个文本编辑工具吧，用记事本打开它会是乱糟糟的一片，没法改。打开后，同样是找到“[Library]”，在它的下面粘贴上刚刚复制的那一大段东西，注意，行开头不要有分号（；），而且人家原有的就别动它，别删掉了。只要在“[Library]”和“[vcom]”之间粘贴就行，然后保存。如图15、图16和图17。 打开ISE，“开始—所有程序—Xilinx ISE Design Suite 13.4（版本不同就不同）—ISE Design Tools—64-bit Project Navigator（32位的就开32-bit Project Navigator）”，图18。 然后在ISE的菜单上“Edit—Preferences…”调出Preferences设置窗口，在左边的“Category”下选中“ISE General—Integrated Tools”。在Integrated Tools项设置中，右边的“Model Tech Simulator：”下面填入Modelsim.exe的文件路径，点旁边的“..”按键选中Modelsim.exe也行，我这儿是“D:\\modeltech64_10.1a\\win64\\modelsim.exe”（不要双引号）。32位的可能是“D:\\modeltech32_10.1a\\win32\\modelsim.exe”。如图19和图20。 到现在已经把家伙准备好了，接下来就是使用它了。新建一个工程，图21，这步不多说，Next。接下来这一步在“Simulator”一项选“Modelsim-SE Mixed”，“Mixed”支持两语言，“SE”是版本，选你自己对应的就成，其它项不讨论，如图22，Next，Finish。忘了选或想重新选的看图23。 新建你的VHDL或Verilog文件，这个不多说。完成之后，切换到仿真模式，就是点工程上面的“Simulation”，可能不同版本会不一样，ISE9.1i 是在“Source for”的下拉菜单中选择Behavioral simulation，不过意思明白就行。建立Test Bench文件，若是VHDL的，也按上面说的处理一下，就是把那两个库声明一下。在“Hierarchy”框选中Test Bench文件，在下面的那个框中点“Modelsim Simulator”前的加号。展开得到“Simulate Behavioral Model”，在它上面点右键，选“Process Properties…”，如图27。 在“Simulate Behavioral Model”上点右键，选“Run”就可以调用Modelsim进行仿真了，如图30。另外提一点，在ISE上也可以编译库的。在仿真模式中，在“Hierarchy”框中选中FPGA名，我这儿是“xc7a8-3csg324”（下面就是仿真文件）。然后在下面的框中点“Design Utilities”前面加号。展开后得到“Compile HDL Simulation Libraries”，在其上点右键，选“Run”，这样就会编译你的工程中所需的仿真库了 。 成功案例如下图，没有报错，ISE调用Modelsim正常。","categories":[{"name":"FPGA","slug":"FPGA","permalink":"https://upsame.coding.me/categories/FPGA/"}],"tags":[{"name":"FPGA","slug":"FPGA","permalink":"https://upsame.coding.me/tags/FPGA/"}]},{"title":"文本OCR与公式OCR的选择","slug":"2019/2019-10-12-ocr-choose","date":"2019-11-17T11:38:05.622Z","updated":"2019-10-12T02:42:49.278Z","comments":true,"path":"2019/11/17/2019/2019-10-12-ocr-choose/","link":"","permalink":"https://upsame.coding.me/2019/11/17/2019/2019-10-12-ocr-choose/","excerpt":"文本OCR与公式OCR的选择","text":"原创 关于文本OCR与公式OCR的一些理解文本OCR:最后比较结果是：Adobe Acrobat 与 有道云的OCR都很不错，最后使用Adobe Acrobat来使用。（Adobe Acrobat识别出的PDF导出为txt后更好用）。首先：有道云笔记需要VIP功能才能使用OCR功能，第二、外能图王OCR没找到破解版，应该效果比有道云笔记好一些。第三、其他的网上OCR也试过，还是Adobe Acrobat 好用。 LightPDF 似乎是很厉害的PDF编辑软件，有OCR功能，识别准确率挺高的。这个软件使用在线的就可以了，不要进行安装，因为安装后的功能还没有在线使用的多，一些功能需要付费，特别是OCR功能只有在线的才能使用。Google搜索OCR或许更能解决问题。有些软件是可以识别手写字体或公式的，如果后面用到的时候可以再搜索（Google）。 公式OCR: mathpix_snipping_tool_setup似乎只能安装再C盘，免费识别公式，但是速度很慢，是因为服务器在国外的原因吗？可能吧。开VPN或者SSR对Mathpix软件有效，可能与浏览器有相同原理吧，这样访问起来就快了，不会出现Network Error的问题。（多次开关SSR后发现的确是这样的，所以以后用Mathpix就可以了）。 将公式截图直接识别为Latex代码，直接粘贴进Mathtype就可以使用，或者使用Latex编辑，识别准确率很高。手写的公式拍照后也能识别，只要写得比较规范，那识别率也很高。 通过此方法对于较为大型的公式可以很方便的键入。连上外网后使用简直就是神器啊，太方便了，Justin 记录。 2018年12月07日 论文神器OCR公式-Inftyreaderhttps://blog.csdn.net/qq894040717/article/details/84284889将文件转化为图片后进行识别，貌似不能识别中文。但是应该好用，也是可以使用的。使用了一下，发现识别率没有mathpix高。","categories":[{"name":"it","slug":"it","permalink":"https://upsame.coding.me/categories/it/"}],"tags":[{"name":"it","slug":"it","permalink":"https://upsame.coding.me/tags/it/"}]},{"title":"SPI 总线协议与实现方法","slug":"2019/2019-10-11-SPI-FPGA-achieve","date":"2019-11-17T11:38:05.616Z","updated":"2019-10-23T02:55:13.667Z","comments":true,"path":"2019/11/17/2019/2019-10-11-SPI-FPGA-achieve/","link":"","permalink":"https://upsame.coding.me/2019/11/17/2019/2019-10-11-SPI-FPGA-achieve/","excerpt":"SPI 总线协议与实现方法","text":"原创首发于我的个人博客 www.upsame.com SPI 总线协议与实现方法知识储备—参看链接：https://www.cnblogs.com/deng-tao/p/6004280.html https://blog.csdn.net/qq_42282258/article/details/81436882 正在使用的模式3，如图： 发送端在时钟下降沿改变数据 SCLK上升沿的阶段，数据保持稳定； 接收端在时钟上升沿接受数据（对线上的数据进行读取）。 目前已经在FPGA K7平台上实现并验证了SPI通信协议。代码可参看FPGA实现SPI通信","categories":[{"name":"FPGA","slug":"FPGA","permalink":"https://upsame.coding.me/categories/FPGA/"}],"tags":[{"name":"SPI FPGA","slug":"SPI-FPGA","permalink":"https://upsame.coding.me/tags/SPI-FPGA/"}]},{"title":"IPV6的学习理解","slug":"2019/2019-10-11-IPV6-learning","date":"2019-11-17T11:38:05.610Z","updated":"2019-10-12T02:47:54.088Z","comments":true,"path":"2019/11/17/2019/2019-10-11-IPV6-learning/","link":"","permalink":"https://upsame.coding.me/2019/11/17/2019/2019-10-11-IPV6-learning/","excerpt":"IPV6的学习理解","text":"原创 IPV6的学习理解@[toc]理解链路本地址与站点本地地址IPv6地址格式简介以及常见的IP地址 一、单播地址（Unicast IPv6 Addresses）1、可聚合的全球单播地址（Aggregatable Global Unicast Addresses）可在全球范围内路由和到达的，相当于IPv4里面的global addresses。前三个bit是001，地址范围： 2000:: – 3FFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF例如：2000::1:2345:6789:abcd又例如：3000::1:2345:6789:abcd 这个前缀中总共包含8192个/16的前缀。其中： 2001::/16 目前实际用于IPV6因特网运作的前缀 2002::/16 为使用6-TO-4过渡机制的节点保留 3FFE::/16 早期的IPv6 6bone试验网单播地址（已经停用，网段被预留） 依据RFC3701，6bone的地址空间3FFE::/16已经于2006年6月6日停用。所有使用6bone前缀的网络必须过渡到使用由RIR分配的商用IPv6地址空间。CERNET自1998年11月获得6bonepTLA前缀3FFE:3200::/24以来，参与6bone的试验并为我国部署IPv6网络积累了经验。6bone地址停用后，原有的隧道为主的试验网如何成功过渡，是当前必须认真考虑的紧迫议题。 全局单播地址是最常用的IPv6单播地址。如果一个机构被分配了一块地址空间，并且只有一个地址前缀通过一个唯一的上游服务提供商接入IPv6 Internet，那么这方面并不需要特别的考虑。 但一个多接入的（Multihomed）网络可能需要考虑如何使用两个以上服务提供商所分配的地址空间。如何使用多个地址前缀取决于采用多接入的根本原因——有弹性的故障保护、负载均衡、实施策略路由，或者解决重新编址（renumbering）的过渡问题。IPv6已经改进了主机对多地址的支持，实现了主机默认地址的选择算法（参见RFC3484: Default Address Selection for IPv6）。多接入的主机如果含有两个不同前缀的全局地址，那么其源地址或者目的地址将按RFC3484所描述的那样去选择。 接口IDEUI-64格式：扩展惟一标识符 在IPV6中，无状态自动配置机制使用EUI-64格式来自动配置IPV6地址所谓无状态自动配置是指在网络中没有DHCP服务器的情况下，允许节点自行配置IPV6地址的机制。EUI-64的构造规则–根据接口的MAC地址再加上固定的前缀来生成一个IPV6的地址工作原理：自动将48bit的以太网MAC地址扩展成64bit，再挂在一个64bit的前缀后面，组成一个IPV6地址 IPv6有三种不同类型的单播地址格式。地址（最后64位）的后半部分总是用于接口ID。系统的MAC地址是由48位并以十六进制表示。 MAC地址被认为是唯一分配全球范围内。接口ID采用此MAC地址的唯一性的优势。通过使用IEEE的扩展唯一标识符（EUI-64）格式的主机可以自动配置其接口ID。首先，主机会将其自己的MAC地址分为两个24位半。那么16位十六进制值0xFFFE的被夹到MAC地址的那两半，导出64位接口ID。 2、链路本地地址（Link-Local Addresses）用于同一个链路上的相邻节点之间通信，相当于IPv4里面的169.254.0.0/16地址。Ipv6的路由器不会转发链路本地地址的数据包。前10个bit是1111 1110 10，由于最后是64bit的interface ID，所以它的前缀总是FE80::/64 （后面的零是标准中规定的）例如：FE80::1 ipv6中：强制性自动分配，机通过MAC地址自动配置生成IPv6地址ipv4中：DHCP分配失败会分配只能用于网段内通信，路由器不会转发此类数据包IPv6网络没有ARP，ARP是在二层网络确认每个MAC和IP的对应。该地址解决了这种问题，使得二层地址被三层网络唯一标识。链路本地地址，是从MAC映射而的，很多回答是“完成邻居发现”，其实它就是个二层地址。之所以映射出来，是为了这些地址进行更好的管理和运用(如完成ARP功能)。不然直接使用MAC地址不就行了。链路本地地址就是二层地址，因此它不会在三层网络设备如路由器之间通信。IPv6本地链路地址生成方式 . 站点本地地址（Site-Local Addresses）（2019年的现在，这个早已被ULA取代，不再使用，这个网段被国际组织预留） 对于无法访问internet的本地网络，可以使用站点本地地址，这个相当于IPv4里面的private address（10.0.0.0/8,172.16.0.0/12, and 192.168.0.0/16）。它的前10个bit是1111 1110 11，它最后是16bit的Subnet ID和64bit的interface ID，所以它的前缀是FEC0::/48。值得注意的是，在RFC3879中，最终决定放弃单播站点本地地址。放弃的理由是，由于其固有的二义性带来的单播站点本地地址的复杂性超过了它们可能带来的好处。它在RFC4193中被ULA取代。 3、唯一的本地IPv6单播地址（ULA，Unique Local IPv6 Unicast Address）RFC4193中标准化了一种用来在本地通信中取代单播站点本地地址的地址。ULA拥有固定前缀FD00::/8，后面跟一个被称为全局ID的40bit随机标识符。 用法上，ULA和IPv4的私有地址十分类似，但它具有近似的全局唯一性。 图 1.3 ULA在大网中的使用： 由于随机选择40位的Global ID，FC00::/7地址块内的大量ULA前缀必然是不聚类的。然而注意到在一个/48大小的ULAGlobal ID之下，仍然有16位的子网ID可供使用，适当分配ULA GlobalID，尽量将逻辑上属于同一对象的网络规划到子网范畴以内，也是避免大网内部路由产生过多more-specifics的有效途径。 图1.3是ULA的地址结构示意图。其中，FC00::/7是ULA类型的前缀。作为一个统一前缀，有利于限制边界网关将这类地址的路由控制在一定范围之内。L是局部标志，置位表示后面的Global ID是各网络独自选择的；40位的Global ID由各网络独自随机选择，随机性保证一个ULA前缀在很大概率上是全局唯一的，因此，ULA并不要求部署它的管理员向一个全球机构注册使用某个前缀。在网络变换其服务提供商及对应的全局地址前缀时，ULA的地址编址体制可以保持不变，因此网络内部的运行将不因重编址而受到影响。 网络在部署ULA同时一般也部署全局地址，因此主机一般都同时分配有这样两种地址。默认地址选择算法能够正确选取源和目的地址，即如果源和目的主机都包含ULA地址时，则选择ULA地址。由于ULA前缀和一个全局的站点网络前缀都是48位的，因此管理员可以考虑对这二者采用一致的子网编址方案。 ULA使用中的一个典型问题是对IPv6组播的影响。IPv6默认地址选择算法会优先考虑ULA地址作为一个IPv6组播流的源地址。这个选择在IPv6组播流发往IPv6 Internet时是不正确的,因为ULA不是全局可路由的，将导致该组播会话的反向路径传递（RPF）在这个内部网络以外失效。 4、Unspecified Address 0:0:0:0:0:0:0:0/128 =&gt; ::/1285、Loopback Address 0:0:0:0:0:0:0:1/128 =&gt; ::1/1286、IPv4 Compatible Address ::192.168.30.1 =&gt; ::C0A8:1E01二、多播IPv6地址（Multicast IPv6 Addresses）前8个bit为1111 1111， 其中FF01::到FF0F::的多播地址是保留专用地址 FF01::1 节点本地范围所有节点多播地址 FF02::1 链路本地范围所有节点多播地址 FF01::2 节点本地范围所有路由器多播地址 FF02::2 链路本地范围所有路由器多播地址 FF05::2 站点本地范围所有路由器多播地址 三、设计小结总的来说，地址分配可以依据某种特定的逻辑来分割已经从RIR获得的地址前缀。这些设计逻辑可以包含对以下因素的考察:地理边界——同一地区的所有子网分配相同的前缀;组织机构边界——同一机构或同一类型机构的联合体分配相同的前缀;业务类别——为某些特定的业务预留地址前缀，如：VoIP、内容分发服务、无线接入、ADSL接入等等;这些方面和IPv4的地址规划类似。然而设计者务必同时考虑到以下IPv6特定的问题：前缀聚类；网络的增长，特别是增长过程中是否还能保持聚类； 表1 IPv6的地址类型及其所占地址空间的比重通过与RFC2373对比可知，RFC3513取消了为NSAP和IPX等保留的地址，将原来的保留地址全部划入了全球单播地址的行列，从而大大扩展了全球单播地址的空间。 校园网络（教育网）1、校园网 WIFI认证后获得公网IP，IP范围属于教育网2、办公场所有线web认证后也获得公网IP，IP范围属于教育网；3、寝室web认证的也是公网IP，不属于教育网。 校园网 WIFI和办公区WEB认证登陆的账号分配了IPV6地址，可以使用Google和youtube服务，不知道是教育网的原因还是IPV6访问的原因。","categories":[{"name":"computer-net","slug":"computer-net","permalink":"https://upsame.coding.me/categories/computer-net/"}],"tags":[{"name":"computer-net","slug":"computer-net","permalink":"https://upsame.coding.me/tags/computer-net/"}]},{"title":"内网搭建公网可以访问的web服务器","slug":"2019/2019-10-01-web-local-net","date":"2019-11-17T11:38:05.603Z","updated":"2019-10-07T01:23:48.733Z","comments":true,"path":"2019/11/17/2019/2019-10-01-web-local-net/","link":"","permalink":"https://upsame.coding.me/2019/11/17/2019/2019-10-01-web-local-net/","excerpt":"内网搭建公网可以访问的web服务器","text":"原创 内网服务器搭建 系统环境：windows 7 sp1 x86局域网IP：192.168.0.203 配置环境：使用软件 phpstudy pro 小皮系统（包含了 php 环境和 Apache 等环境）；使用开源私有云系统 KodExplorer 。 搭建方法： 打开 phpstudy pro，开启 Apache或Nginx 功能，使用默认端口80，最好设置为开机自启； 将KodExplorer解压缩，文件拷贝到D:/phpstudy_pro/www/文件夹下，在Phpstudy_pro软件中设置网站的物理路径为D:/phpstudy_pro/WWW/kodexplorer ，其他设置为默认不变。 在另一台局域网内主机使用浏览器访问192.168.0.203，可以登陆KodExplorer 系统。 Ps: 可以注意到phpstudy pro平台中还可以开启FTP服务、MySQL服务，需要设置为其他端口。 内网服务映射到公网1、最简单的方式是将192.168.0.203对应的主机设置为DMZ主机，一般路由器都有这个功能。 2、路由器上进行端口映射，比第一种方式更安全且更灵活； 3、花生壳软件，首先在官网注册账号，然后在局域网某台电脑（比如192.168.0.203）上安装花生壳软件并运行后登陆花生壳官网注册的账号即可。不需要进行后续的映射配置。 本次使用的是方法1，将192.168.0.203设置DMZ主机 DMZ主机相当于拥有路由器的公网IP，因此访问公网IP就等于访问DMZ主机。而对于内网，DMZ主机的IP仍然是192.168.0.203 ，内网主机可以通过192.168.0.203访问DMZ，也可以通过公网IP访问DMZ。 直接使用IP访问内网访问：http://192.168.0.203 或 外网访问：http://139.48.164.169 后者是路由器获得的公网IP。由于DMZ主机默认开放了所有端口，所以远程桌面、NAS文件夹分享都可以通过公网IP进行访问。 使用域名访问两种方式， 一种是进行域名注册和DNS解析，将域名与绑定IP实现访问； 另一种是使用花生壳的壳域名在路由器或电脑端进行设置即可访问。 域名注册和DNS解析方式 腾讯云或者在新网上购买 yourname.xyz 的域名一年使用权，需要实名认证；截至到目前2019年10月这两个网站都在搞活动，域名可以几乎免费使用1年。 添加DNS解析，腾讯云或者新网平台上设置域名解析，将域名解析到公网IP上 。 使用域名搭建网站需要进行备案，目前没有备案。主要是指连接使用国内云服务器需要备案，内网搭建的服务器有自己的IP，不用备案。 花生壳的壳域名实现DDNS解析通常路由器都可以进行DDNS的配置，如图是路由器 padawan 系统下的设置方法，其余路由器类似： 在路由器上设置的花生壳账号并登陆后，所以可以通过使用壳域名进行访问，如使用 http://openshare.zicp.vip 访问服务。 需要注意：1、路由器的端口映射与DMZ主机不冲突，端口映射的优先级更高，即优先对映射的端口进行转发，然后剩余的（没有设置端口映射）的端口都自动转发到DMZ主机上。 2、当设置的端口不是浏览器默认的80端口时，访问需要加上对应的端口号比如：139.48.164.169:8080 知识梳理路由器端口交互图：","categories":[{"name":"it","slug":"it","permalink":"https://upsame.coding.me/categories/it/"}],"tags":[{"name":"it","slug":"it","permalink":"https://upsame.coding.me/tags/it/"}]},{"title":"Ubuntu18.04中使用KVM","slug":"2019/2019-09-21-Ubuntu-KVM","date":"2019-11-17T11:38:05.596Z","updated":"2019-10-02T08:08:45.198Z","comments":true,"path":"2019/11/17/2019/2019-09-21-Ubuntu-KVM/","link":"","permalink":"https://upsame.coding.me/2019/11/17/2019/2019-09-21-Ubuntu-KVM/","excerpt":"Ubuntu18.04中使用KVM","text":"Ubuntu18.04中使用KVM首先，ubuntu本身就是一个虚拟机，是我在教研室的Windows 10电脑使用VMware Workstation创建的虚拟机，分配的内存为4G和双处理器+双核（一共应该是4个线程）。 我在这个Ubuntu虚拟机中又使用KVM创建了一个虚拟机，安装Lite操作系统。按照网上的教材走，最开始鼠标不同步的问题，似乎有解决方案，但是应用后没有直接生效，可能是要重启虚拟机吧。之后第二天我来的时候开启虚拟机重装KVM 虚拟机时鼠标问题就没有了。然后安装正常。 KVM分配了10GB空间，分配了Ubuntu的两个核，1G内存。安装后使用了59%，运行还比较流畅。感觉界面比Ubuntu更好用呢，很有windows的风格。如下：需要明确的是默认KVM中虚拟机和宿主机不能直接复制粘贴，需要一定的增强工具，但是不管了。 默认使用NAT方式联网，可以联网成功（打开了百度），网桥连接似乎有点问题，以后用到了再说吧。 所以要体验Lite linux，就可以再这个虚拟机下体验。（虚拟机中的虚拟机）。 对于KVM，基本的虚拟机功能都有，但是似乎没有VMware tool这样的好工具可以用。KVM只能运行于linux系统上，Virtualbox和VMware都可以跨平台。 ================================================================================= KVM是一个集成的Linux解决方案，我发现用它创建的虚拟机响应速度不错，唯一的缺陷是少针对桌面解决方案的功能，如3D图形加速，或GUI管理工具，所以用来搭服务器应该比较适用。","categories":[{"name":"linux","slug":"linux","permalink":"https://upsame.coding.me/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://upsame.coding.me/tags/linux/"}]},{"title":"Matlab中CVX工具箱使用","slug":"2019/2019-09-10-matlab-cvx","date":"2019-11-17T11:38:05.591Z","updated":"2019-10-01T11:29:38.807Z","comments":true,"path":"2019/11/17/2019/2019-09-10-matlab-cvx/","link":"","permalink":"https://upsame.coding.me/2019/11/17/2019/2019-09-10-matlab-cvx/","excerpt":"Matlab中CVX工具箱使用","text":"Matlab中CVX工具箱使用CVX是一个凸优化解决工具，需要在Matlab上使用。CVX让Matlab变成一个模型语言，可以使用Matlab的标准语法完成优化问题的求解。 安装 下载官方安装包，解压缩到任意路径，建议和Matlab放到一起。 打开Matlab，切换路径到CVX的存放路径，Matlab中运行cvx_setup命令即完成安装。 12cd C:\\personal\\cvxcvx_setup CVX 支持的解析器slover 该版本的cvx支持4种具有不同特性的解析器slover : SeDuMi、SDPT3、MOSEK 、Gurobi 所以使用cvx并不需要去额外下载一个slover，因为CVX的安装包中已经包含了 SeDuMi and SDPT3，这两个slover是免费许可的，默认启用的是SDPT3（The default solver is currently SDPT3）。 MOSEK 包含在CVX的教育许可证和商业许可证中，使用教育邮箱申请教育版许可，即可免费使用。 Gurobi and MOSEK 同样也可以搭载到CVX中去，但是你需要获得专业版许可证CVX Professional license才能使用这些功能。 (可以下载带有Gurobi and MOSEK的CVX包或单独下载Gurobi and MOSEK，之后安装专业版许可证) ，两个公司均有教育许可。 使用实例1、官网实例，目标是解决如下优化问题：$$ \\begin{array}{ll} \\text{minimize} &amp; |Ax-b|_2 \\ \\text{subject to} &amp; Cx=d \\ &amp; |x|_\\infty\\leq e \\end{array}$$在Matlab中使用以下代码即可完成优化求解， 12345678910m = 20; n = 10; p = 4;A = randn(m,n); b = randn(m,1);C = randn(p,n); d = randn(p,1); e = rand;cvx_begin variable x(n) minimize( norm( A * x - b, 2 ) ) %目标函数 subject to C * x == d %约束条件1 norm( x, Inf ) &lt;= e %约束条件2cvx_end 2、上面的自变量是单个向量，下面给出一个多个变量的求解方案；还是一个凸函数最优化问题，主要问题如下：首先要把需要解决的问题写成convex optimization的标准问题，即明确目标函数和条件约束。$$\\begin{array}{l}{\\max {\\mathbf{g}, t} t} \\ {\\text { s.t. } \\Re\\left{2 \\mathbf{g}{m-1}^{H} \\mathbf{M}{l \\hat{l}} \\mathbf{g}-\\mathbf{g}{m-1}^{H} \\mathbf{M}{l \\hat{l}} \\mathbf{g}{m-1}^{H}\\right} \\geq t, \\forall l \\neq \\hat{l}} \\ {\\quad \\quad|\\mathbf{g}|^{2} \\leq M_p}\\end{array}$$其中，$M_{l\\hat{l}}$为矩阵，$M_p$为固定值，约束向量$g$的幅度。 123456789cvx_begin variable g(n,1) t maximize (t) %目标函数 subject to %约束条件 for i = 1:56 real(g_m'*M(i)*g - g_m'*M(i)*g_m) &gt;= t; end norm(g) &lt;= M;cvx_end 在Matlab中可以使用循环语句完成大量约束的枚举，更加方便。","categories":[{"name":"mathmodel","slug":"mathmodel","permalink":"https://upsame.coding.me/categories/mathmodel/"}],"tags":[{"name":"mathmodel","slug":"mathmodel","permalink":"https://upsame.coding.me/tags/mathmodel/"}]},{"title":"Markdown在不同平台下的使用感受","slug":"2019/2019-09-01-markdown","date":"2019-11-17T11:38:05.586Z","updated":"2019-10-01T11:50:19.929Z","comments":true,"path":"2019/11/17/2019/2019-09-01-markdown/","link":"","permalink":"https://upsame.coding.me/2019/11/17/2019/2019-09-01-markdown/","excerpt":"Markdown在不同平台下的使用感受","text":"@Markdown简书使用手机号码才能注册，无法使用邮箱注册账户这一点曾经让我不想注册这个应用；但是，现在的我就如李彦宏所说 &gt;&gt; 觉得似乎可以牺牲一些较少的隐私来换取便利： 注册简书后，我可以在手机上查看一些精彩的文章，或者发布一些文章，这样的操作方式对网站泄露了自己的手机号码，但是为了获得这个便捷的社交方式，我最终还是使用手机号注册了。 简书写博文首先，简书平台适合文件的分享和公开发布，不适合于笔记和用来文件记录；简书中，写文章可以选择富文本编辑器和Markdown编辑器，就是如同印象笔记的普通的编辑器和Markdown编辑器，编辑器功能支持不是很足，但是够用； 手机端和网页端均可以看到自己编辑的所有博客内容，包括未发布的和发布的内容。 编辑的文本可以实时保存，可以点击发布，但是一旦发布就是公开的，无法选择私密发布还是公开发布，一律是公开的。 自动保存而没有点击发布的文章视为私密文章，但是很容易点击到发布按钮（很多时候都有发布的按钮，只需要点击一下就直接发布了，没有任何思考的余地）； 从这一点看来，简书的文章私密性很小，不适合书写重要文件，写在简书上的文章要是可以公开发布的文章；从这一点看，大部分的笔记、心得等不需要公开的文件应该写在云笔记中，或者离线存储在本地；简书支持历史版本恢复，保存的版本很全面； 发布后的文章也是可以修改的。 简书上的博文简书上的文章似乎很多没有使用markdown编辑，大多数人写一句话换一行（空一行），看起来效果也还是不错的。 所以写文章没有必要一定要使用markdown语言，只要觉得方便就可以了。 新浪博客新浪博客不支持Markdown语法输入;但是可以设置为私密博文和公开博文； CSDN获得的下载积分貌似有下载期限—为一年，超过时间没有使用的积分会被清理；购买的100积分的账户就被清理了，如今还剩下十几分； CSDN 博客含有两种编辑模式： HTML 编辑模式 列表内容 Markdown 编辑模式，markdown语法支持格式和马克飞象十分相似（基本兼容，换行不需要双空格），直接复制粘贴没有太大问题； 简书上也是这样的，可以现在马克飞象中编辑，然后直接复制到简书中，完全可以； 因为马克飞象中智能编辑和快捷建使用支持很好，所以建议先在马克飞象中编辑后再复制； 结合上面这一点，可以写出好的方便的文章； 综述文章（或者笔记等）的公开分享可以选择简书或CSDN的博客平台；较大文件的公开分享可以选择微云或百度云；使用印象笔记国际板可以进行公开分享的方法确实可以，但是不专业，笔记的公开分享可以是文章，也可以是文件，压缩包等 但是由于受限于上传流量，所以如果没有会员的时候不适合大文件上传和分享；国内版本只能分享给注册了账户的人（查看分享需要登陆）；顺便说，坚果云付费版本也可以公开分享给所有人； 私密文件笔记：印象笔记、有道云笔记（有道云目前可以公开分享） 公开分享：如上综述； neitot","categories":[{"name":"life","slug":"life","permalink":"https://upsame.coding.me/categories/life/"}],"tags":[{"name":"life","slug":"life","permalink":"https://upsame.coding.me/tags/life/"}]},{"title":"FPGA学习网站推荐","slug":"2019-10-26-FPGA学习网站推荐","date":"2019-10-25T16:00:00.000Z","updated":"2019-10-27T09:10:17.167Z","comments":true,"path":"2019/10/26/2019-10-26-FPGA学习网站推荐/","link":"","permalink":"https://upsame.coding.me/2019/10/26/2019-10-26-FPGA%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/","excerpt":"FPGA学习网站推荐","text":"原创 FPGA官网 毫无疑问，FPGA的两大主力厂商的主页不容错过，所有资料都原汁原味。 https://www.xilinx.com/ ，中文网站， https://china.xilinx.com/ Xilinx 官方论坛 https://forums.xilinx.com/ Xilinx 官方论坛中文: 赛灵思中文社区论坛 Altera官网： http://www.altera.com.cn/ Altera的Recommended HDL Coding Styles可在 官网下找到。 博客论坛国内的 这个是做黑金开发板的官方博客： https://www.cnblogs.com/alinx/ 博客有FPGA的教程，初学者挺不错的。 黑金动力社区： http://www.heijin.org 为黑金板提供大量支持。 电子发烧友论坛（ http://bbs.elecfans.com/ ）的FPGA板块看看，有许多可下载的资料，61ic（http://www.61ic.com/）也是个国内不错的选择。 EETOP 比电子发烧友论坛质量要稍微高一点吧。 国外的 除了FPGA生产厂商的官网，当然最有名的就数 http://opencores.org/ 了，8051内核就可以在里面找到。进入后，选择project或者由http//www.opencores.org/browse.cgi/by_category进入。 实际上，OpenCore是一个开源的IP设计网站，经过多年的发展与积累，已经受到很多的FPGA和ASIC的开发者的认可。在OpenCore上，我们找到大量的开源设计（VHDL&amp;Verilog HDL），甚至还可以与开发者直接交流学习。目前，该网站已经累计有1174个项目（IP），且其中有很多都是经过项目验证，甚至是经过ASIC验证的。 fpga4fun网址为： http://www.fpga4fun.com/ 。该网站是Jean P. Nicolle的个人分享网站，上面有一些非常有意思的设计和一些开源IP设计。相对于OpenCore，该网站图文并茂，讲解的非常详细，非常适合FPGA初学者。参考该网站，做几个基于FPGA的小设计，还是一件非常有意思的事情呢！ 开源硬件社区 http://www.openhw.org/ 也许也能为您提供一些帮助。 初学者强烈推荐的， http://www.fpga-faq.org/ ，搜集了大量的faq，对基础讲解详细。 以上网站目前均可在国内访问。","categories":[{"name":"FPGA","slug":"FPGA","permalink":"https://upsame.coding.me/categories/FPGA/"}],"tags":[{"name":"FPGA\tSummary","slug":"FPGASummary","permalink":"https://upsame.coding.me/tags/FPGASummary/"}]},{"title":"国产FPGA生存现状","slug":"2019-10-25-FPGA","date":"2019-10-24T16:00:00.000Z","updated":"2019-10-26T07:18:47.998Z","comments":true,"path":"2019/10/25/2019-10-25-FPGA/","link":"","permalink":"https://upsame.coding.me/2019/10/25/2019-10-25-FPGA/","excerpt":"国产FPGA生存现状","text":"转载自 吴川斌的博客 https://www.mr-wu.cn原文链接 https://www.mr-wu.cn/guo-chan-fpga-sheng-cun-xian-zhuang/ 国产FPGA生存现状 最近，一份关于FPGA巨头Xilinx赛灵思的财报老wu觉得蛮有意思，2019 财年第三季度，赛灵思净收入8 亿美元，同比上涨 34%，这是赛灵思“里程碑式的成就”——首次实现了8亿美元的收入，同时盈利再次创下了公司的纪录。财报发布次日，赛灵思股价应声上涨 18%，在科技股寒冬中可谓逆势走强。其中，通信业务得益于全球 4G LET 和 5G 的部署，增幅达到 41%， 在各业务板块中增幅最高。通信板块的增长主要受益于韩国 5G 部署和中国 5G 部署的提早开始。 随着未来几年大量5G基站的部署，给国外移动通信厂商带来可观的利润增长那是肯定，但没想到国外FPGA厂家也能赚个盆满钵满，还是创纪录式的盈利。这得益于无线通信、航空航天和国防、测试测量和仿真市场的强势带动，赛灵思在每个主要终端市场都取得了增长。特别是5G无线通信市场，5G时代用的频率很可能从4G时代的1.8G提升至3.5G，这意味着其频率穿透性会变差，衰减也会更快，基站覆盖范围要远小于3G、4G基站。有数据显示，一个3G基站可以覆盖的区域可能需要4-5个5G基站覆盖。高通曾在旧金山做过实验，0.1个平方公里的区域，需要部署174个2.8G频段的小基站，然后才能达到5G的服务标准。这意味着需要运营商需要购买数倍的基站，这也带动了赛灵思业务的增长。5G 与 FPGA 有什么关联？5G 网络的典型特点包括高速度、泛在网、低功耗、低延时，以及更高的可扩展性、智能性和异构性。 为满足这些新的要求，5G 网络必须采用许多新的技术，比如海量 MI-MO、云 RAN、新的基带和 RF 架构 等，而这些新的技术存在不确定性和较长的优化和迭代过程，而且市场上短期内没有形成统一的方案， 在网络应用和运维通过较长时间达到最优之前，都需要 FPGA 方案解决。FPGA 两大国际巨头赛灵思和英特尔都将 5G 通信作为未来几年的战略方向之一。Xilinx赛灵思在FPGA界是怎么个存在？FPGA是电场可编程逻辑闸阵列（英语：Field Programmable Gate Array）的缩写，赛灵思是FPGA、可编程SoC及ACAP的发明者，也是全球第一大FPGA供应商。FPGA市场份额第二名是Altera，于2015年12月28日，被英特尔收购。第三名是Lattice。FPGA市场基本上国外Xilinx、Altera、Lattice三家为大， FPGA自Xilinx发明以来，主要的高端技术一直被其所掌控，据业内人士称，Xilinx在FPGA方面一直很高傲，甚至瞧不起Altera、Lattice等同样在FPGA方面具有雄厚实力的巨头。我们知道未来5G市场规模非常巨大，在5G移动通信领域，我们有华为可以与国外厂商拜一下手腕，那面对5G 带给 FPGA 的丰厚红利，国内厂家能分上一杯羹吗？目前，FPGA龙头厂商以Xilinx赛灵思、英特尔（并购了Altera）为主，Lattice莱迪思和Microsemi美高森美也占据了一定的市场份额。在国家政策和资金的支持下，国内的FPGA玩家也不少，光上海地区来看，FPGA企业数量就超过了整个美国，但一个能打的都没有?之前国内比较知名的FPGA厂商是京微雅格，其通过开创“硬件可重构，软件可编程”特点的FPGA+CPU+RAM+Flash可配置应用平台，拟在国外严重垄断的市场杀出一条血路来，以此撬动FPGA的中低端市场，但最终还是失败了。目前国产能量产的FPGA中，规模最大、指标最先进的是紫光同创的 Titan 系列 FPGA，逻辑规模近 200K，支持 6.6Gbps 的 Serdes，这个指标距离国际先进水平还有很大的差距。其他厂商还有上海安路、广东高云，京微齐力、上海复旦微、AGM等企业，都以偏低端的 CPLD 和小规模 FPGA 器件为主，市场占有率低。当然，米国对我国的FPGA产品与技术出口有苛刻的审核和禁运制度的，为使得国家在航天、航空乃至国家安全领域有FPGA可用，政府多年来投入了数百亿科研经费，通过逆向工程方式仿制的FPGA产品还是取得了一定的成绩，但由于知识产权、工艺和软件技术等多方面的限制，供给军工领域小批量试用还行，但受专利保护的限制，要进入更广阔的商业应用领域还是困难重重的，赛灵思、英特尔两家FPGA专利超过6000项，覆盖了单元架构、IP和互连等各方面核心技术，可以说技术壁垒实在太高了。允许弯道超车吗？限制中国FPGA产业发展的瓶颈技术垄断Xilinx、Intel、Lattice、Microsemi等厂商拥有共计10000件专利，占总量60+%， FPGA架构和核心电路、应用方案，基本被国外专利网覆盖，限制初创公司技术发展。人才垄断全球绝大部分FPGA专业人才，集中在美国四家龙头厂商，其他厂商人才匮乏、难觅!资金投入门槛高芯片需要最先进制造封测工艺、软件开发难度大、IP多而杂，需要众多产品才能支撑市场。因此，FPGA产业发展资金投入巨大!Xilinx研发投入5亿美元/年，占净利润的84%! 国产厂商研发投入严重不足，紫光同创投入最高，也只有~1.5亿元/年! FPGA行业，投入大、见效慢，靠行业投资难以做起来，必须靠政府支持才有希望!希望还是要有的，而且必须要有！研发具有自主知识产权的FPGA技术与产品对打破美国企业和政府结合构成的垄断及涉及国家利益方面都意义深远。FPGA对国家安全至关重要– 信息安全: 棱镜门监听、英国发现波音787客机的FPGA内置火焰病毒等事件，足见FPGA安全的重要性– 产业安全: 中兴禁运危机等事件，引发中兴、华为等系统厂商对核心器件国产化的高度关注– 国防安全: 美国对中国国防设备禁运所有FPGA，尤其高端FPGA“一颗难求”!不论国产FPGA现状如何，我们都要抱着一个积极和乐观的心态去看待，弯道超车是不可能的了，只有脚踏实地，未来才可期。未来包括AI、大数据、物联网、无人驾驶在内的新兴行业都处于快速变化的阶段，对极具灵活性、可重构的FPGA产品将有很大的需求，构成庞大的增量市场。避免与美国两家大品牌的正面冲突，寻找中低端市场的突破口，老wu还是相信未来国内会出现不错的FPGA公司。","categories":[{"name":"FPGA","slug":"FPGA","permalink":"https://upsame.coding.me/categories/FPGA/"}],"tags":[{"name":"FPGA\tSummary","slug":"FPGASummary","permalink":"https://upsame.coding.me/tags/FPGASummary/"}]}]}